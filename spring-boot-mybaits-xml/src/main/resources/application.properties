# 数据库用户名
spring.datasource.username=root
# 数据库密码
spring.datasource.password=admin
# JDBC Driver
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# JDBC URL
spring.datasource.url=jdbc:mysql://localhost:3306/db_student?serverTimezone=Asia/Shanghai
#spring.datasource.url=jdbc:mysql://localhost:3306/db_student?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=true

# 是否执行MyBatis xml配置文件的状态检查, 只是检查状态,默认false
mybatis.check-config-location=true
# mybatis-config.xml文件的位置
mybatis.config-location=classpath:mybatis/mybatis-config.xml
# Mapper对应的xml路径
mybatis.mapper-locations=classpath:mybatis/mapper/*.xml
# 设置别名的路径,可避免写全限定类名
mybatis.type-aliases-package=com.manu.mybaitsxml.model

# 指定alias类的父类,
# 当没有指定父类时,那么type-aliases-package下的所有类都会指定别名
# 当指定父类后,type-aliases-package下的指定父类的子类,才会加载别名
#mybatis.type-aliases-super-type=java.lang.Object
# 类型转换器的路径包名.加载类型转换器.javaType与JdbcType互转
#mybatis.type-handlers-package=
# 指定以何种方式执行SqlSessionTemplate,三种模式如下:
# simple(默认) : 为每个语句的执行创建一个新的预处理语句,单条提交sql .每执行一次update或select，
#         就开启一个Statement对象，用完立刻关闭Statement对象(可以是Statement或PrepareStatement对象)
# reuse : 执行update或select,以sql作为key查找Statement对象,存在就使用,不存在就创建,用完后,不关闭Statement对象,
#         而是放置于Map<String, Statement>内,供下一次使用(可以是Statement或PrepareStatement对象)
# batch : 重复使用已经预处理的语句,执行update(没有select,JDBC批处理不支持select),
#         将所有sql都添加到批处理中(addBatch()),等待统一执行(executeBatch()),它缓存了多个Statement对象,
#         每个Statement对象都是addBatch()完毕后,等待逐一执行executeBatch()批处理的
#mybatis.executor-type=simple

# 懒初始化,mybatis会为每个mapper生成一个bean,那么对于这些bean是否需要延迟初始化
# 延迟初始化会有多线程问题,慎用,默认false
#mybatis.lazy-initialization=false


# myBaits configuration

#mybatis.configuration.key-generators=
# 配置的扩展属性ext为123
#mybatis.configuration-properties.ext = "123"
# 默认false,表示按需加载,true表示全部加载
# 设置延迟加载的所有属性是全部加载,还是按需加载
#mybatis.configuration.aggressive-lazy-loading=false
# 自动匹配属性字段的动作,支持三种方式:
# NONE:不自动匹配
# PARTIAL(默认):会自动匹配字段,但内嵌字段/多层级复杂字段属性不匹配
# FULL:会自动匹配字段,内嵌字段/多层级复杂字段属性也会匹配,但性能不佳,从实用角度来说,不会有这么复杂的sql查询结果
#mybatis.configuration.auto-mapping-behavior=partial
# 没有匹配的属性字段时,要怎么处理的动作,有以下三种方式:
# NONE:不处理,跳过
# WARNING:日志打出警告信息
# FAILING:抛出异常信息SqlSessionException
#mybatis.configuration.auto-mapping-unknown-column-behavior=failing
# 是否启用缓存,默认true表示启用缓存,这里是一级缓存
#mybatis.configuration.cache-enabled=false
# 所有缓存的namespace
#mybatis.configuration.cache-names=
# 缓存方案,已提供如下缓存方案,缓存的装饰器,也可以自定义缓存,实现Cache接口
#  BlockingCache
#  FifoCache
#  LoggingCache
#  LruCache
#  ScheduledCache
#  SerializedCache
#  SoftCache
#  SynchronizedCache
#  TransactionalCache
#  WeakCache
# 注意这里配置没有效果,需要在mapper.xml文件里配置
#mybatis.configuration.caches=
# null,空值时,是否调用setter方法,默认false不调用
#mybatis.configuration.call-setters-on-nulls=false
#mybatis.configuration.configuration-factory=java.lang.Object
#mybatis.configuration.database-id=
#mybatis.configuration.default-enum-type-handler=org.apache.ibatis.type.ArrayTypeHandler
#mybatis.configuration.default-executor-type=batch
#mybatis.configuration.default-fetch-size=
#mybatis.configuration.default-result-set-type=default
#mybatis.configuration.default-statement-timeout=
# 环境标识,可以做环境隔离,和环境区分,不同环境设置不同的事务工厂和不同的数据源
#mybatis.configuration.environment=
#mybatis.configuration.incomplete-cache-refs=
#mybatis.configuration.incomplete-methods=
#mybatis.configuration.incomplete-result-maps=
#mybatis.configuration.incomplete-statements=
# 拦截器,可以对执行sql做自定义处理.也可以阻止执行sql
#mybatis.configuration.interceptors=
# 当写入null值的字段时,部分数据库需要指定null的数据类型,mysql不用设置,oracle需要设置
#mybatis.configuration.jdbc-type-for-null=array
#mybatis.configuration.key-generator-names=
# 默认是: "equals", "clone", "hashCode", "toString"
# 懒加载属性的触发条件,当执行指定方法时,触发延迟加载
# lazyLoadTriggerMethods = new HashSet<>(Arrays.asList("equals", "clone", "hashCode", "toString"));
#mybatis.configuration.lazy-load-trigger-methods=
# 默认false表示禁用
# 全局启用或禁用延迟加载,当禁用时,所有关联对象都会即时加载
# Mybatis仅支持association关联对象和collection关联集合对象的延迟加载
# association指的就是一对一,collection指的就是一对多查询。
#mybatis.configuration.lazy-loading-enabled=false
# 本地缓存的有效范围,支持SESSION,STATEMENT
# SESSION: 一个sqlsession中有效
# STATEMENT: 针对单独的sql有效.可以在不同session中
#mybatis.configuration.local-cache-scope=session
# 输出日志的实现类,支持6种日志模式,默认依次使用以下顺序.
#  tryImplementation(LogFactory::useSlf4jLogging);
#  tryImplementation(LogFactory::useCommonsLogging);
#  tryImplementation(LogFactory::useLog4J2Logging);
#  tryImplementation(LogFactory::useLog4JLogging);
#  tryImplementation(LogFactory::useJdkLogging);
#  tryImplementation(LogFactory::useNoLogging);
#mybatis.configuration.log-impl=org.apache.ibatis.logging.commons.JakartaCommonsLoggingImpl
# 指定日志输出的前缀
#mybatis.configuration.log-prefix=
#mybatis.configuration.map-underscore-to-camel-case=false
#mybatis.configuration.mapped-statement-names=
#mybatis.configuration.mapped-statements=
#mybatis.configuration.multiple-result-sets-enabled=false
#mybatis.configuration.object-factory=
#mybatis.configuration.object-wrapper-factory=
#mybatis.configuration.parameter-map-names=
#mybatis.configuration.parameter-maps=
#mybatis.configuration.proxy-factory=
#mybatis.configuration.reflector-factory=
#mybatis.configuration.result-map-names=
#mybatis.configuration.result-maps=
#mybatis.configuration.return-instance-for-empty-row=false
#mybatis.configuration.safe-result-handler-enabled=false
#mybatis.configuration.safe-row-bounds-enabled=false
#mybatis.configuration.sql-fragments.s = ""
#mybatis.configuration.use-actual-param-name=false
#mybatis.configuration.use-column-label=false
#mybatis.configuration.use-generated-keys=false
#mybatis.configuration.variables.s = ""
#mybatis.configuration.vfs-impl=org.apache.ibatis.io.DefaultVFS

# myBaits scripting-language-driver
#mybatis.default-scripting-language-driver=org.apache.ibatis.scripting.defaults.RawLanguageDriver
#mybatis.scripting-language-driver.freemarker.freemarker-settings.s = ""
#mybatis.scripting-language-driver.freemarker.template-file.base-dir=
#mybatis.scripting-language-driver.freemarker.template-file.path-provider.cache-enabled=false
#mybatis.scripting-language-driver.freemarker.template-file.path-provider.includes-mapper-name-when-separate-directory=false
#mybatis.scripting-language-driver.freemarker.template-file.path-provider.includes-package-path=false.
#mybatis.scripting-language-driver.freemarker.template-file.path-provider.prefix=
#mybatis.scripting-language-driver.freemarker.template-file.path-provider.separate-directory-per-mapper=false
#mybatis.scripting-language-driver.thymeleaf.customizer=
#mybatis.scripting-language-driver.thymeleaf.dialect.like-additional-escape-target-chars=
#mybatis.scripting-language-driver.thymeleaf.dialect.like-escape-char=
#mybatis.scripting-language-driver.thymeleaf.dialect.like-escape-clause-format=
#mybatis.scripting-language-driver.thymeleaf.dialect.prefix=
#mybatis.scripting-language-driver.thymeleaf.template-file.base-dir=
#mybatis.scripting-language-driver.thymeleaf.template-file.cache-enabled=false
#mybatis.scripting-language-driver.thymeleaf.template-file.cache-ttl=
#mybatis.scripting-language-driver.thymeleaf.template-file.encoding=UTF-8
#mybatis.scripting-language-driver.thymeleaf.template-file.path-provider.cache-enabled=false
#mybatis.scripting-language-driver.thymeleaf.template-file.path-provider.includes-mapper-name-when-separate-directory=false
#mybatis.scripting-language-driver.thymeleaf.template-file.path-provider.includes-package-path=false
#mybatis.scripting-language-driver.thymeleaf.template-file.path-provider.prefix=
#mybatis.scripting-language-driver.thymeleaf.template-file.path-provider.separate-directory-per-mapper=false
#mybatis.scripting-language-driver.thymeleaf.template-file.patterns=
#mybatis.scripting-language-driver.thymeleaf.use2way=false
#mybatis.scripting-language-driver.velocity.additional-context-attributes.s = ""
#mybatis.scripting-language-driver.velocity.velocity-settings.s = ""






